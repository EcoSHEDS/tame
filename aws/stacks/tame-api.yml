AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway resource stack for TAME
Parameters:
  apiName:
    Type: String
    Default: tame-api
  authRoleName:
    Type: String
    Default: tame-role-auth
  unauthRoleName:
    Type: String
    Default: tame-role-unauth
  authPolicyName:
    Type: String
    Default: tame-api-policy-auth
  unauthPolicyName:
    Type: String
    Default: tame-api-policy-unauth
  functionName:
    Type: String
    Default: tame-lambda
  functionArn:
    Type: String
    Default: arn:aws:lambda:us-east-1:474916309046:function:tame-lambda
  env:
    Type: String
    Default: dev
Resources:
  API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "TAME Api Gateway"
      Name: !Ref apiName
      FailOnWarnings: true
      Body:
        swagger: "2.0"
        info:
          version: "2018-05-24T17:52:00Z"
          title: "TAME API"
        host: !Join ["", ["apigateway.", !Ref "AWS::Region", ".amazonaws.com"]]
        schemes:
          - https
        basePath: !Ref env
        paths:
          /projects:
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !Ref functionArn
                    - /invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          "/projects/{proxy+}":
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !Ref functionArn
                    - /invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
  APIAuthPolicy:
    DependsOn:
      - API
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref authPolicyName
      Roles:
        - !Ref authRoleName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "execute-api:Invoke"
            Resource:
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /GET
                  - /projects
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /GET
                  - /projects/*
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /POST
                  - /projects
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /PUT
                  - /projects/*
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /DELETE
                  - /projects/*
  APIUnauthPolicy:
    DependsOn:
      - API
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Ref unauthPolicyName
      Roles:
        - !Ref unauthRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "execute-api:Invoke"
            Resource:
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /GET
                  - /projects/*
              - !Join
                - ""
                - - "arn:aws:execute-api:"
                  - !Ref "AWS::Region"
                  - ":"
                  - !Ref "AWS::AccountId"
                  - ":"
                  - !Ref API
                  - /
                  - !Ref env
                  - /GET
                  - /projects
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref functionName
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:aws:execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref API
          - /*/*/*
  APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      Description: The API stage deployment for TAME
      StageName: !Ref env
      RestApiId: !Ref API
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join
      - ""
      - - "https://"
        - !Ref API
        - .execute-api.
        - !Ref "AWS::Region"
        - .amazonaws.com/
        - !Ref env
  ApiName:
    Description: API Friendly name
    Value: API
